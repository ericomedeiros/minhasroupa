import type { NextPage } from 'next'
import React, { useState } from 'react'
import Head from 'next/head'
import stylesHome from '../styles/Home.module.css'
import { styled } from '../stitches.config';
import { WeatherCard } from '../components/WeatherCard';
import { CitiesList } from '../components/CitiesList';


interface WeatherMessages {
  [index: string]: string[];
  blank: string[];
  sunny: string[];
  raining: string[];
  willRain: string[];
}

const Search = styled('input', {
  backgroundColor: '$elementBackground',
  borderRadius: '10px 10px 10px 10px',
  borderColor: '$elementButtonText',
  fontSize: '13px',
  color: '$elementHeadLine',
  width: '100%',
  padding: '10px 15px',
  '&:hover': {
    backgroundColor: '$elementBackground',
    borderColor: '$elementButtonText',
  },
  variants: {
    cities:{
      true:{
        borderRadius: '10px 10px 0px 0px',
      }
    }
  }
});

const weatherMessages: WeatherMessages = {
  blank: [
    "Previ nada"
  ],
  sunny: [
    "Vamo pendurar, hoje ta que tá",
    "É pra fazer duas maquinadas tranquilamente",
  ],
  raining: [
    "Corre!",
    "Se não notou até agora, já foi",
  ],
  willRain: [
    "Se tem sorte, vai rapido",
    "Pendura, mas fica de olho",
  ],
};
const weatherTypes = Object.keys(weatherMessages);


function ramdomWeatherType(params:string): string {
  return weatherTypes[0];
  if(params.length > 0){
    const idx = Math.floor(Math.random() * weatherTypes.length);
    return weatherTypes[idx];
  }
}

function ramdomWeatherMessage(weatherType: string): string {
  if(weatherType.length > 0){
    const idx = Math.floor(Math.random() * weatherMessages[weatherType].length);
    return weatherMessages[weatherType][idx];
  }
  return "";
}

const Home: NextPage = () => {
  const [search, setSearch] = useState("");
  const [cities, setCities] = useState([]);
  const [city, setCity] = useState("");
  const currWeatherType = ramdomWeatherType(search);
  const currWeatherMeesage = ramdomWeatherMessage(currWeatherType);
  
  async function findCities(param:string) {
    if(param.length === 0){
      setCities([]);
      return;
    }
    const url = `http://api.openweathermap.org/geo/1.0/direct?q=${param}&limit=10&appid=${process.env.NEXT_PUBLIC_WEATHER_API_KEY}`;
  
    const resp = await fetch(url);
    if (resp.ok) {
      const data = await resp.json();
      setCities(data);
      console.log(data);
    } else {
      if (cities.length > 0) {
        setCities([]);
      }
    }
  }
  function searchLocation(params:React.ChangeEvent<HTMLInputElement>) {
    const foundCities = findCities(params.target.value);
    setSearch(params.target.value);
  }

  function selectCity(params:{lat:DoubleRange,lon:DoubleRange}) {
    alert(`${params.lon},${params.lat}`)
  }

  return (
    <div className={stylesHome.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={stylesHome.main}>
        <h1 className={stylesHome.title}>
          Bem vindo! Vamos secar algumas roupas?
        </h1>

        <div className={stylesHome.grid}>
          <Search cities={cities.length > 0} type={'search'} placeholder={'Onde está?'} onChange={searchLocation}/>
          <CitiesList selectCity={selectCity} cities={cities}/>
        </div>
        <WeatherCard text={currWeatherMeesage} weatherType={currWeatherType}/>
      </main>

      <footer className={stylesHome.footer}>
        
      </footer>
    </div>
  )
}

export default Home
